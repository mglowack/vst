name: CI build

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master
env:
  REGISTRY: ghcr.io
  IMAGE_TAG: ghcr.io/${{ github.repository }} 
  BUILD_TYPE: Debug
  
jobs:
  build-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:        
      - name: Checkout repository
        uses: actions/checkout@v3
 
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        
      - name: Log into registry "${{ env.REGISTRY }}"
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ env.IMAGE_TAG }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
  build-source:
    needs: build-image
    runs-on: ubuntu-latest
    container:
      image: ghcr.io/${{ github.repository }} 
      credentials:
       username: ${{ github.actor }}
       password: ${{ secrets.GITHUB_TOKEN }}
    steps:
    - run: pwd
    
    - name: Checkout
      uses: actions/checkout@v3
      
    - run: echo ${{github.workspace}}
    - run: echo ${{github.repository}}
    
    - run: ls
      
    - name: Configure
      # Build your program with the given configuration
      run: >
        cmake 
        .
        -B build 
        -G Ninja
        -DCMAKE_CXX_COMPILER=g++-13
        -DCMAKE_C_COMPILER=gcc-13
        -DCMAKE_BUILD_TYPE=${{ env.BUILD_TYPE }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build build
      #--config ${{ env.BUILD_TYPE }}

    - name: Test
      working-directory: ${{github.workspace}}/build
      # Execute tests defined by the CMake configuration.
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest -C ${{env.BUILD_TYPE}}

    # steps:
    # - run: echo ${{ env.IMG_NAME }}
    # - uses: actions/checkout@v4
    # - uses: docker/login-action@v3
    #   with:
    #     registry: ${{ env.REGISTRY }}
    #     username: ${{ github.actor }}
    #     password: ${{ secrets.GITHUB_TOKEN }}
    # -
    #   name: Build and push
    #   uses: docker/build-push-action@v5
    #   with:
    #     context: .
    #     push: ${{ github.event_name != 'pull_request' }}
    #     tags: ${{ steps.meta.outputs.tags }}
    #     labels: ${{ steps.meta.outputs.labels }}
    # - name: Docker metadata
    #   id: metadata
    #   uses: docker/metadata-action@v5
    #   with:
    #     images: ${{ env.IMG_NAME }}
    #     tags: |
    #       type=semver,pattern={{version}}
    #       type=semver,pattern={{major}}.{{minor}}
    #       type=raw,value={{sha}},enable=${{ github.ref_type != 'tag' }}
    # - run: docker build . --file Dockerfile --tag dev-vst
    # - name: step one
      # run: echo "hello CI"
#   build:
#     runs-on: ${{ matrix.os }}

#     strategy:
#       # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
#       fail-fast: false

#       matrix:
#         os: [ubuntu-latest]
#         build_type: [Debug]
#         c_compiler: [gcc-12]
#         cpp_compiler: [g++-12]

#     steps:
#     - uses: actions/checkout@v3

#     - name: Set reusable strings
#       # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
#       id: strings
#       shell: bash
#       run: |
#         echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"

#     - name: Configure CMake
#       # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
#       # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
#       run: >
#         cmake -B ${{ steps.strings.outputs.build-output-dir }}
#         -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
#         -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
#         -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
#         -S ${{ github.workspace }}

#     - name: Build
#       # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

#     - name: Test
#       working-directory: ${{ steps.strings.outputs.build-output-dir }}
#       # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
#       # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
#       run: ctest --build-config ${{ matrix.build_type }}
